# by default some intel compilers put temporaries on the stack
# this might lead to segmentation faults is the stack limit is set to low
# stack limits can be increased by sysadmins or e.g with ulimit -s 256000
# furthermore new ifort (10.0?) compilers support the option
# -heap-arrays 64
# add this to the compilation flags is the other options do not work
# The following settings worked for:
# - AMD64 Opteron
# - SUSE Linux Enterprise Server 10.0 (x86_64)
# - Intel(R) Fortran Compiler for Intel(R) EM64T-based applications, Version 10.0.025
# - AMD acml library version 3.6.0
# - MPICH2-1.0.5p4
# - SCALAPACK library          1.8.0
#
#
CC       = mpicc
CPP      = 
FC       = mpif90 
LD       = mpif90
AR       = ar -r
DFLAGS   = -D__INTEL -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK -D__FFTW3 -D__FFTMKL -D__LIBINT -D__HAS_NO_ISO_C_BINDING
#DFLAGS   = -D__INTEL -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK -D__FFTW3 -D__FFTMKL
CPPFLAGS = 
FFTW_INC = ROLLFFTW/include
FCFLAGS  = $(DFLAGS) -I$(FFTW_INC) -O3 -xW -heap-arrays 64 -funroll-loops -fpp -free -I../libint/include
#FCFLAGS  = $(DFLAGS) -I$(FFTW_INC) -O3 -xW -heap-arrays 64 -funroll-loops -fpp -free
FCFLAGS2 = $(DFLAGS) -I$(FFTW_INC) -O1 -xW -heap-arrays 64 -fpp -free
LDFLAGS  = $(FCFLAGS) -I$(FFTW_INC)
INTEL_LIB = MKL_ROOT/lib/intel64
LIBS     = $(INTEL_LIB)/libmkl_scalapack_lp64  -Wl,--start-group $(INTEL_LIB)/libmkl_intel_lp64.a $(INTEL_LIB)/libmkl_sequential.a $(INTEL_LIB)/libmkl_core $(INTEL_LIB)/libmkl_blacsROLLTYPEMKLlp64.a -Wl,--end-group -lpthread  -LROLLFFTW/lib -lfftw3 ROLLWRAPPER/libint_cpp_wrapper.o  -LROLLLIBINT -lderiv -lint -lstdc++


OBJECTS_ARCHITECTURE = machine_intel.o


graphcon.o: graphcon.F
	$(FC) -c $(FCFLAGS2) $<

