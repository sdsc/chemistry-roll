CC       = mpicc
CPP      = /lib/cpp
FC       = mpif90
LD       = mpif90
AR       = /usr/bin/ar -r
LIBXC_INC  = LIBXCPATH/include
LIBXC_LIB  = LIBXCPATH/lib
LIBXSMM_LIB  = LIBXSMMPATH/lib
LIBXSMM_INC  = LIBXSMMPATH/include
DFLAGS   = -D__GFORTRAN -D__FFTSG -D__parallel -D__BLACS -D__SCALAPACK -D__FFTW3 -D__LIBINT -D__LIBXC  -D__LIBINT_MAX_AM=8 -D__LIBDERIV_MAX_AM1=7  -D__MKL CUDADEFS -D__LIBXSMM
FFTW_INC = ROLLFFTW/include
CPPFLAGS =  $(DFLAGS) -P -traditional -I$(FFTW_INC) -I$(LIBXC_INC) -I$(LIBXSMM_INC)
FCFLAGS  = $(DFLAGS)  -I/usr/include -I$(LIBXC_INC) -funroll-loops -ffree-form -O2 -ffast-math -I$(FFTW_INC) -I$(LIBXSMM_INC)
LDFLAGS  = $(FCFLAGS)
INTEL_LIB = MKL_ROOT/lib/intel64
LIBS     = $(INTEL_LIB)/libmkl_scalapack_lp64.a  -Wl,--start-group $(INTEL_LIB)/libmkl_gf_lp64.a $(INTEL_LIB)/libmkl_sequential.a $(INTEL_LIB)/libmkl_core.a $(INTEL_LIB)/libmkl_blacs_INTELMPITYPE_lp64.a -Wl,--end-group -lpthread  -LROLLFFTW/lib -lfftw3 -LLIBINTPATH -L$(LIBXC_LIB) -L$(LIBXSMM_LIB) -lxcf03 -lxc -lxsmmf -lxsmm -lderiv -lint -lr12 -lstdc++ -ldl CUDALIBS -lm

NVCC = NVCCPATH
NVFLAGS = -ccbin `which g++`  $(DFLAGS) -O2 -gencode arch=compute_30,code=sm_30 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_50,code=sm_50 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_70,code=sm_70
